/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Basic configuration for some process
 * -------------------------------------------------
 */

wf_repository = 'maxulysse'

params {
  // set up default params
  docker = false // Don't use Docker to build buildContainers.nf
  download = false // Don't download reference files in buildReferences.nf
  explicitBqsrNeeded = true // Enable recalibration in main.nf
  genome = 'GRCh38' // Default reference genome is GRCh38
  help = false // Don't give help information
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 for details
  max_cpus = 16 // Base specifications
  max_memory = 128.GB // Base specifications
  max_time = 240.h // Base specifications
  more = false // Don't give version information
  noBAMQC = false // Use BAMQC
  noGVCF = false // HaplotypeCaller will output gVCF as well
  noReports = false // Reports are made by default
  nucleotidesPerSecond = 1000.0 // To estimate interval size by default
  onlyQC = false // All process will be run and not only the QC tools
  outDir = "${PWD}" // Path to output directory
  publishDirMode = 'link' // publishDir mode is 'link' by default
  push = false // Don't push container to DockerHub
  repository = wf_repository // DockerHub containers repository
  singularity = false // Don't use singularity to build buildContainers.nf
  step = 'mapping' // Default step is mapping
  strelkaBP = false // Don't use Manta's candidate indels as input to Strelka
  tag = 'latest' // Default tag is latest, to be overwritten by --tag <version>
  targetBED = false // no targets by default
  test = false // Not testing by default
  verbose = false // Enable for more verbose information
  awsqueue = false // Queue has to be provided when using awsbatch executor
  awsqueue_tiny = params.awsqueue // A separate queue with smaller instance types
  localReportDir = false // Used by AWS since reporting is not fully supported on s3 buckets
}

process {

  //## appearing in multiple .nf scripts
  // - `RunBcftoolsStats` - Run BCFTools stats on vcf files
  withName: RunBcftoolsStats {}
  // - `RunVcftools` - Run VCFTools on vcf files
  withName: RunVcftools {}
  // - `CreateIntervalBeds` - Create and sort intervals into bed files
  withName: CreateIntervalBeds {}
  // - `ConcatVCF` - Merge results from paralellized callers
  withName: ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  // - `RunSingleManta` - Run Manta for Single Structural Variant Calling
  withName: RunSingleManta {}

  //## `annotate.nf`
  //
  // - `RunBcftoolsStats` - Run BCFTools stats on vcf files
  //withName: RunBcftoolsStats {}
  // - `RunVcftools` - Run VCFTools on vcf files
  //withName: RunVcftools {}
  // - `RunSnpeff` - Run snpEff for annotation of vcf files
  withName: RunSnpeff {}
  // - `RunVEP` - Run VEP for annotation of vcf files
  withName: RunVEP {}
  // - `CompressVCF` - Compress and index vcf files using tabix
  withName: CompressVCF {}
  //
  //## `build.nf`
  //
  // - `BuildWithDocker` - Build containers using Docker
  withName: BuildWithDocker {}
  // - `PullToSingularity` - Pull Singularity containers from Docker Hub
  withName: PullToSingularity {}
  // - `PushToDocker` - Push containers to Docker Hub
  withName: PushToDocker {}
  // - `DecompressFile` - Extract files if needed
  withName: DecompressFile {}
  // - `BuildBWAindexes` - Build indexes for BWA
  withName: BuildBWAindexes {}
  // - `BuildReferenceIndex` - Build index for FASTA refs
  withName: BuildReferenceIndex {}
  // - `BuildSAMToolsIndex` - Build index with SAMTools
  withName: BuildSAMToolsIndex {}
  // - `BuildVCFIndex` - Build index for VCF files
  withName: BuildVCFIndex {}
  // - `BuildCache_snpEff` - Download Cache for snpEff
  withName: BuildCache_snpEff {}
  // - `BuildCache_VEP` - Download taqbix index Cache for VEP
  withName: BuildCache_VEP {}
  //
  //## `main.nf`
  //
  //- `RunFastQC` - Run FastQC for QC on fastq files
  withName: RunFastQC {}
  // - `MapReads` - Map reads with BWA
  withName: MapReads {}
  // - `MergeBams` - Merge BAMs if multilane samples
  withName: MergeBams {}
  // - `MarkDuplicates` - Mark Duplicates with GATK4
  withName: MarkDuplicates {}
  // - `CreateRecalibrationTable` - Create Recalibration Table with BaseRecalibrator
  withName: CreateRecalibrationTable {}
  // - `RecalibrateBam` - Recalibrate Bam with PrintReads
  withName: RecalibrateBam {}
  // - `RunSamtoolsStats` - Run Samtools stats on recalibrated BAM files
  withName: RunSamtoolsStats {}
  // - `RunBamQCmapped` - Run qualimap BamQC on mapped BAM files
  withName: RunBamQCmapped {}
  // - `RunBamQCrecalibrated` - Run qualimap BamQC on recalibrated BAM files
  withName: RunBamQCrecalibrated {}
  //
  //## `germlineVC.nf`
  //
  // - `CreateIntervalBeds` - Create and sort intervals into bed files
  //withName: CreateIntervalBeds {}
  // - `RunHaplotypecaller` - Run HaplotypeCaller for Germline Variant Calling (Parallelized processes)
  withName: RunHaplotypecaller {}
  // - `RunGenotypeGVCFs` - Run HaplotypeCaller for Germline Variant Calling (Parallelized processes)
  withName: RunGenotypeGVCFs {}
  // - `ConcatVCF` - Merge results from paralellized callers
  //withName: ConcatVCF {}
  // - `RunSingleStrelka` - Run Strelka for Germline Variant Calling
  withName: RunSingleStrelka {}
  // - `RunSingleManta` - Run Manta for Single Structural Variant Calling
  //withName: RunSingleManta {}
  // - `RunBcftoolsStats` - Run BCTools stats on vcf files
  //withName: RunBcftoolsStats {}
  // - `RunVcftools` - Run VCFTools on vcf files
  //withName: RunVcftools {}
  //
  //## `somaticVC.nf`
  //
  // - `CreateIntervalBeds` - Create and sort intervals into bed files
  //withName: CreateIntervalBeds {}
  // - `RunMutect2` - Run MuTect2 for Variant Calling (Parallelized processes)
  withName: RunMutect2 {}
  // - `RunFreeBayes` - Run FreeBayes for Variant Calling (Parallelized processes)
  withName: RunFreeBayes {}
  // - `ConcatVCF` - Merge results from paralellized variant callers
  //withName: ConcatVCF {}
  // - `RunStrelka` - Run Strelka for Variant Calling
  withName: RunStrelka {}
  // - `RunStrelkaBP` - Run Strelka Best Practices for Variant Calling
  withName: RunStrelkaBP {}
  // - `RunManta` - Run Manta for Structural Variant Calling
  withName: RunManta {}
  // - `RunSingleManta` - Run Manta for Single Structural Variant Calling
  //withName: RunSingleManta {}
  // - `RunAlleleCount` - Run AlleleCount to prepare for ASCAT
  withName: RunAlleleCount {}
  // - `RunConvertAlleleCounts` - Run convertAlleleCounts to prepare for ASCAT
  withName: RunConvertAlleleCounts {}
  // - `RunAscat` - Run ASCAT for CNV
  withName: RunAscat {}
  // - `RunBcftoolsStats` - Run BCFTools stats on vcf files
  //withName: RunBcftoolsStats {}
  // - `RunVcftools` - Run VCFTools on vcf files
  //withName: RunVcftools {}
  // - `GetVersionAlleleCount` - Get version of tools
  withName: GetVersionAlleleCount {}
  // - `GetVersionASCAT` - Get version of tools
  withName: GetVersionASCAT {}
  //
  //## `runMultiQC.nf`
  //
  // - `GetVersionAll` - Get version of tools
  withName: GetVersionAll {}
  // - `RunMultiQC` - Run MultiQC on reports
  withName: RunMultiQC {}
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

report {  // Turning on execution report by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_report.html"
}

timeline { // Turning on timeline tracking by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_timeline.html"
}

dag { // Turning on dag by default
  enabled = true
  file = "${params.outDir}/Reports/Sarek_DAG.svg"
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${params.outDir}/Reports/Sarek_trace.txt"
}
